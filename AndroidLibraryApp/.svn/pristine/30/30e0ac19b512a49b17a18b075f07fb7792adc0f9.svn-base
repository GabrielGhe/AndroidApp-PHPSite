package cs534.team3.phase1.database;

import java.util.concurrent.ExecutionException;

import cs534.team3.phase1.Product;

import android.content.Context;
import android.database.Cursor;
import android.os.AsyncTask;
import android.util.Log;

/**
 * This class links the activities to the DBHelper via an AsyncTask.
 * 
 * @author Natacha Gabbamonte 0932340
 * @author Caroline Castonguay-Boisvert 084348
 * @author Gabriel Gheorghian 0737019
 * 
 *         Project CS534.team3.phase1
 * 
 */
public class AsyncDBHelper {

	private DBHelper database = null;
	private String tag = null;

	private static final String GENRE = "GENRE";
	private static final String PLATFORM = "PLATFORM";
	private static final String NAME = "NAME";

	/**
	 * Constructor.
	 * 
	 * @param context
	 *            The context.
	 */
	public AsyncDBHelper(Context context, String tag) {
		database = new DBHelper(context, tag);
		this.tag = tag;
	}

	/**
	 * Returns all the products contained in the database.
	 * 
	 * @return the products
	 */
	public Cursor getAllProducts() {
		try {
			return new AsyncQuery().execute().get();
		} catch (InterruptedException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		} catch (ExecutionException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	/**
	 * Returns all of the products corresponding to the genres.
	 * 
	 * @param genres
	 *            the genre filters
	 * @return the products that correspond to the genres
	 */
	public Cursor getProductsByGenre(String... genres) {
		try {
			return new AsyncQuery().execute(new String[] { GENRE }, genres)
					.get();
		} catch (InterruptedException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		} catch (ExecutionException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	/**
	 * Returns all of the products corresponding to the platforms.
	 * 
	 * @param platforms
	 *            the platform filters
	 * @return the products that correspond to the platforms
	 */
	public Cursor getProductsByPlatform(String... platforms) {
		try {
			return new AsyncQuery().execute(new String[] { PLATFORM },
					platforms).get();
		} catch (InterruptedException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		} catch (ExecutionException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	/**
	 * Gets a product based on the name
	 * 
	 * @param name
	 *            the name of the product
	 * @return the product
	 */
	public Cursor getProducts(String name) {
		try {
			return new AsyncQuery().execute(new String[] { NAME },
					new String[] { name }).get();
		} catch (InterruptedException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		} catch (ExecutionException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	/**
	 * Gets a product based on the id
	 * 
	 * @param id
	 *            the id of the product
	 * @return the product
	 */
	public Product getProduct(int id) {
		try {
			return new AsyncQueryFromId().execute(id).get();
		} catch (InterruptedException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		} catch (ExecutionException e) {
			Log.e(tag, e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	/*
	 * The AsyncTask for querying the products.
	 */
	private class AsyncQuery extends AsyncTask<String[], Void, Cursor> {

		@Override
		protected Cursor doInBackground(String[]... params) {
			if (params.length == 0)
				return database.getAllProducts();
			else if (params[0][0].equals(GENRE))
				return database.getProductsByGenres(params[1]);
			else if (params[0][0].equals(PLATFORM))
				return database.getProductsForPlatforms(params[1]);
			else if (params[0][0].equals(NAME))
				return database.getProducts(params[1][0]);

			return null;
		}
	}

	/*
	 * The AsyncTask for querying the products from an ID number.
	 */
	private class AsyncQueryFromId extends AsyncTask<Integer, Void, Product> {

		@Override
		protected Product doInBackground(Integer... params) {
			Cursor cursor = database.getProduct(params[0]);
			if (cursor != null) {
				if (cursor.moveToNext()) {
					Product product = new Product();
					product.set_id(cursor.getInt(cursor
							.getColumnIndex(DBHelper.COLUMN_ID)));
					product.setQuantity(cursor.getInt(cursor
							.getColumnIndex(DBHelper.COLUMN_QUANTITY)));
					product.setGenre(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_GENRE)));
					product.setPlatform(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_PLATFORM)));
					product.setName(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_NAME)));
					product.setImageURL(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_IMAGE_URL)));
					product.setPhpId(cursor.getInt(cursor
							.getColumnIndex(DBHelper.COLUMN_MYSQL_ID)));
					product.setDescription(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_DESCRIPTION)));
					product.setPrice(cursor.getDouble(cursor
							.getColumnIndex(DBHelper.COLUMN_PRICE)));
					product.setTaxable(cursor.getInt(cursor
							.getColumnIndex(DBHelper.COLUMN_TAXABLE)) == 0 ? false
							: true);
					product.setDate(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_CREATED)));
					product.setModifyDate(cursor.getString(cursor
							.getColumnIndex(DBHelper.COLUMN_MODIFIED)));

					return product;
				}
			}
			return null;
		}

	}
}
